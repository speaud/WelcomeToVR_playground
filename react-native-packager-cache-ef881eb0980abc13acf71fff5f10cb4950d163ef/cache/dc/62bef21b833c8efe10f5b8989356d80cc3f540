Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Module2 = require('./Module');

var _Module3 = babelHelpers.interopRequireDefault(_Module2);

function encodePosition(_ref) {
  var coords = _ref.coords,
      timestamp = _ref.timestamp;

  return {
    coords: {
      latitude: coords.latitude,
      longitude: coords.longitude,
      altitude: coords.altitude,
      accuracy: coords.accuracy,
      altitudeAccuracy: coords.altitudeAccuracy,
      heading: coords.heading
    },
    timestamp: timestamp
  };
}

var LocationObserver = function (_Module) {
  babelHelpers.inherits(LocationObserver, _Module);

  function LocationObserver(rnctx) {
    babelHelpers.classCallCheck(this, LocationObserver);

    var _this = babelHelpers.possibleConstructorReturn(this, (LocationObserver.__proto__ || Object.getPrototypeOf(LocationObserver)).call(this, 'LocationObserver'));

    _this._rnctx = rnctx;
    _this._watchID = null;
    return _this;
  }

  babelHelpers.createClass(LocationObserver, [{
    key: 'requestAuthorization',
    value: function requestAuthorization() {
      navigator.geolocation.getCurrentPosition(function () {});
    }
  }, {
    key: 'getCurrentPosition',
    value: function getCurrentPosition(options, onSuccess, onError) {
      var _this2 = this;

      if (!navigator.geolocation) {
        this._rnctx.invokeCallback(onError, []);
      }
      var watchOptions = {};
      if (typeof options.enableHighAccuracy === 'boolean') {
        watchOptions.enableHighAccuracy = options.enableHighAccuracy;
      }
      if (typeof options.maximumAge === 'number') {
        watchOptions.maximumAge = options.maximumAge;
      }
      if (typeof options.timeout === 'number') {
        watchOptions.timeout = options.timeout;
      }
      navigator.geolocation.getCurrentPosition(function (pos) {
        _this2._rnctx.invokeCallback(onSuccess, [encodePosition(pos)]);
      }, function (err) {
        var code = err.code,
            message = err.message;

        _this2._rnctx.invokeCallback(onError, [{ code: code, message: message }]);
      }, watchOptions);
    }
  }, {
    key: 'startObserving',
    value: function startObserving(options) {
      var _this3 = this;

      if (this._watchID === null) {
        var watchOptions = {};
        if (typeof options.enableHighAccuracy === 'boolean') {
          watchOptions.enableHighAccuracy = options.enableHighAccuracy;
        }
        if (typeof options.maximumAge === 'number') {
          watchOptions.maximumAge = options.maximumAge;
        }
        if (typeof options.timeout === 'number') {
          watchOptions.timeout = options.timeout;
        }
        this._watchID = navigator.geolocation.watchPosition(function (pos) {
          _this3._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['geolocationDidChange', encodePosition(pos)]);
        }, function (_ref2) {
          var code = _ref2.code,
              message = _ref2.message;

          _this3._rnctx.callFunction('RCTDeviceEventEmitter', 'emit', ['geolocationError', { code: code, message: message }]);
        }, watchOptions);
      }
    }
  }, {
    key: 'stopObserving',
    value: function stopObserving() {
      if (this._watchID !== null) {
        navigator.geolocation.clearWatch(this._watchID);
      }
    }
  }]);
  return LocationObserver;
}(_Module3.default);

exports.default = LocationObserver;