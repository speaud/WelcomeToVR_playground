Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Bridge2 = require('./Bridge');

var _Bridge3 = babelHelpers.interopRequireDefault(_Bridge2);

var BRIDGE_CODE = '\nvar Status = undefined;\n\nonmessage = function(e) {\n  var msg = JSON.parse(e.data);\n  if (!msg || !msg.cmd) {\n    return;\n  }\n  if (msg.cmd === \'moduleConfig\' ) {\n    __fbBatchedBridgeConfig = msg.moduleConfig;\n    Status = \'moduleConfig\';\n  } else\n  if (msg.cmd === \'bundle\' && Status === \'moduleConfig\') {\n    try {\n      importScripts(msg.bundleName);\n      Status = \'bundle\';\n    } catch (e) {\n      console.warn(e);\n      var xmlhttp = new XMLHttpRequest();\n      xmlhttp.open("GET", msg.bundleName, true);\n      xmlhttp.onreadystatechange=function() {\n        if (xmlhttp.readyState == 4) {\n          var result = JSON.parse(xmlhttp.responseText);\n          if (result) {\n            if (result.type === \'UnableToResolveError\' || result.type === \'NotFoundError\') {\n              console.warn(result.message);\n            } else {\n              if (result.snippet) {\n                // remove all color characters and split the lines for improved clarity\n                result.snippet = result.snippet.replace(/\\u001b\\[.*?m/g, \'\').split(\'\\n\');\n              }\n              if (result.filename && result.filename.indexOf(\':\') <= 2) {\n                result.filename = \'file:///\' + result.filename;\n              }\n              if (result.errors) {\n                for (var i=0; i<result.errors.length; i++) {\n                  var error = result.errors[i];\n                  if (error.filename && error.filename.indexOf(\':\') <= 2) {\n                    error.filename = \'file:///\' + error.filename;\n                  }\n                }\n              }\n              console.warn(JSON.stringify(result, undefined, 2));\n            }\n          }\n        }\n      }\n      xmlhttp.send(null);\n    }\n  } else if (Status === \'bundle\') {\n    if (msg.cmd === \'exec\') {\n      var results = __fbBatchedBridge.callFunctionReturnFlushedQueue.apply(null, [msg.module, msg.function, msg.args]);\n      try {\n        postMessage({cmd: \'exec\', results: results});\n      } catch (e) {\n        console.warn(e);\n        console.warn(msg);\n        console.warn(JSON.stringify(results))\n      }\n    } else\n    if (msg.cmd === \'invoke\') {\n      var results = __fbBatchedBridge.invokeCallbackAndReturnFlushedQueue.apply(null, [msg.id, msg.args]);\n      try {\n        postMessage({cmd: \'exec\', results: results});\n      } catch (e) {\n        console.warn(e);\n        console.warn(msg);\n        console.warn(JSON.stringify(results))\n      }\n    } else\n    if (msg.cmd === \'flush\') {\n      var results = __fbBatchedBridge.flushedQueue.apply(null);\n      try {\n        postMessage({cmd: \'exec\', results: results});\n      } catch (e) {\n        console.warn(e);\n        console.warn(msg);\n        console.warn(JSON.stringify(results))\n      }\n    }\n  }\n}\n';

var WebWorkerBridge = function (_Bridge) {
  babelHelpers.inherits(WebWorkerBridge, _Bridge);

  function WebWorkerBridge() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    babelHelpers.classCallCheck(this, WebWorkerBridge);

    var _this = babelHelpers.possibleConstructorReturn(this, (WebWorkerBridge.__proto__ || Object.getPrototypeOf(WebWorkerBridge)).call(this));

    var bridgeCode = BRIDGE_CODE;
    if (options.enableDevTools) {
      bridgeCode += '__DEVTOOLS__ = true;\n';
    }

    var bridgeCodeBlob = new Blob([bridgeCode]);
    var bridgeCodeURL = URL.createObjectURL(bridgeCodeBlob);
    _this._worker = new Worker(bridgeCodeURL);
    _this._worker.onmessage = function (e) {
      var msg = e.data;
      if (!msg || !(msg instanceof Object)) {
        return;
      }
      if (_this._messageHandler) {
        _this._messageHandler(msg);
      }
    };
    return _this;
  }

  babelHelpers.createClass(WebWorkerBridge, [{
    key: 'postMessage',
    value: function postMessage(msg) {
      this._worker.postMessage(msg);
    }
  }, {
    key: 'getWorker',
    value: function getWorker() {
      return this._worker;
    }
  }]);
  return WebWorkerBridge;
}(_Bridge3.default);

exports.default = WebWorkerBridge;